{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","todoList","activeItem","id","title","completed","editing","fetchTasks","bind","handleChange","handleSubmit","startEdit","deleteTask","toggleStrike","getCookie","this","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","console","log","fetch","then","res","json","data","setState","e","value","target","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","catch","error","task","tasks","self","className","onSubmit","style","flex","onChange","type","placeholder","map","index","key","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ee5402ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css'\n\n/**\n* @author a_kk\n* @class App\n**/\n\nclass App extends Component {\n constructor(props){\n   super(props);\n   this.state = {\n     todoList: [],\n     activeItem: {\n       id: null,\n       title: '',\n       completed: false\n     },\n     editing: false,\n   }\n   this.fetchTasks = this.fetchTasks.bind(this)\n   this.handleChange = this.handleChange.bind(this)\n   this.handleSubmit = this.handleSubmit.bind(this)\n   this.startEdit = this.startEdit.bind(this)\n   this.deleteTask = this.deleteTask.bind(this)\n   this.toggleStrike = this.toggleStrike.bind(this)\n   this.getCookie = this.getCookie.bind(this)\n }\n\n componentDidMount(){\n   this.fetchTasks()\n }\n\n getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n          const cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n          }\n      }\n  }\n  return cookieValue;\n }\n\n //use async and await\n fetchTasks(){\n   console.log('Fetching....')\n   fetch('http://127.0.0.1:8000/api/task-list/')\n   .then(res => res.json())\n   .then(data => \n    this.setState({\n      todoList: data\n    })\n    )\n }\n\n handleChange(e){ \n   const value = e.target.value;\n   this.setState({\n     activeItem: {\n       ...this.state.activeItem,\n       title: value\n     }\n   })\n }\n\n //add try catch block\n handleSubmit(e){\n   e.preventDefault()\n   const csrftoken = this.getCookie('csrftoken');\n   let url = 'http://127.0.0.1:8000/api/task-create/';\n\n   if(this.state.editing === true){\n     url = `http://127.0.0.1:8000/api/task-update/${ this.state.activeItem.id}/`;\n     this.setState({\n       editing: false\n     })\n   }\n\n   fetch(url, {\n     method: 'POST',\n     headers: {\n      'Content-type':'application/json',\n      'X-CSRFToken':csrftoken,\n     },\n     body: JSON.stringify(this.state.activeItem)\n   }).then((res) =>{\n     this.fetchTasks()\n     this.setState({\n       activeItem:{\n         id: null,\n         title: '',\n         completed: false,\n       }\n     })\n   }).catch((error) => {\n     console.log('ERROR:', error)\n   })\n }\n\n startEdit(task){\n   this.setState({\n     activeItem: task,\n     editing: true,\n   })\n }\n\n deleteTask(task){\n  const csrftoken = this.getCookie('csrftoken');\n\n  fetch(`http://127.0.0.1:8000/api/task-delete/${task.id}/`, {\n    method: 'DELETE',\n    headers: {\n      'Content-type':'application/json',\n      'X-CSRFToken':csrftoken,\n    }\n  }).then((res) => {\n    this.fetchTasks()\n  })\n\n }\n\n toggleStrike(task){\n   task.completed = !task.completed;\n   const csrftoken = this.getCookie('csrftoken');\n   const url = `http://127.0.0.1:8000/api/task-update/${task.id}/`;\n   fetch(url, {\n     method: 'POST',\n     headers: {\n      'Content-type':'application/json',\n      'X-CSRFToken':csrftoken,\n     },\n     body: JSON.stringify({'completed': task.completed, 'title':task.title})\n   }).then(() => {\n     this.fetchTasks()\n   })\n }\n\n // after clicking the border around btns should disappear\n render() {\n  const tasks = this.state.todoList;\n  const self = this;\n  return(\n    <div className=\"container\">\n      <div id=\"task-container\">\n        <div id=\"form-wrapper\">\n          <form onSubmit={this.handleSubmit} id=\"form\">\n            <div className=\"flex-wrapper\">\n              <div style={{flex: 6}}>\n                <input onChange={this.handleChange}className=\"form-control\" id=\"title\" type=\"text\" name=\"title\" value={this.state.activeItem.title} placeholder=\"Add task...\"/>\n              </div>\n              <div style={{flex: 1}}>\n                <input id=\"submit\" className=\"btn btn-warning\" type=\"submit\" name=\"Add\"/>\n              </div>\n            </div>\n          </form>\n\n        </div>\n        <div id=\"list-wrapper\">\n          {tasks.map((task, index) => {\n            return (\n              <div key={index} className=\"task-wrapper flex-wrapper\">\n                <div onClick={() => self.toggleStrike(task)} style={{flex: 7}}>\n                  {task.completed === false? (\n                    <span>{task.title}</span>\n                  ) : (\n                    <strike>{task.title}</strike>\n                  )}\n                </div>\n                <div style={{flex: 1}}>\n                  <button onClick={() =>  self.startEdit(task)} className=\"btn btn-sm btn-outline-info\">Edit</button>\n                </div>\n                <div style={{flex: 1}}>\n                  <button onClick={() => self.deleteTask(task)} className=\"btn btn-sm btn-outline-dark delte\">-</button>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n    )\n   }\n }\n\n\nexport default App\n\n\n// changes\n// move getCokkie to utils\n// fix delete on edit issue\n// should not be able to edit once strike is done","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}